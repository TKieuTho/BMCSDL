    <!DOCTYPE html>
    <html lang="vi">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Quản lý Nhân viên - Hệ thống Quản lý Sinh viên</title>
        <!-- Bootstrap CSS -->
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
        <link rel="stylesheet" href="<%= BASE_URL %>/css/style.css">
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
        <style>
            .employees-table {
                background-color: #fff;
                border-radius: var(--border-radius);
                box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
                overflow: hidden;
                margin-top: 20px;
            }

            .search-container {
                margin-bottom: 20px;
            }

            .search-container input {
                padding: 8px;
                font-size: 14px;
                border: 1px solid #ccc;
                border-radius: 4px;
                width: 100%;
                box-sizing: border-box;
            }

            .pagination {
                margin-top: 20px;
                text-align: center;
            }

            .pagination button {
                padding: 8px 12px;
                margin: 0 5px;
                border: 1px solid #3498db;
                background-color: #fff;
                color: #3498db;
                cursor: pointer;
                border-radius: 4px;
                font-size: 14px;
            }

            .pagination button:hover {
                background-color: #3498db;
                color: #fff;
            }

            .pagination button.active {
                background-color: #3498db;
                color: #fff;
                font-weight: bold;
            }

            .pagination button:disabled {
                border-color: #ccc;
                color: #ccc;
                cursor: not-allowed;
            }

            .action-btn {
                background-color: var(--primary-color);
                color: white;
                padding: 10px 20px;
                border: none;
                border-radius: var(--border-radius);
                cursor: pointer;
                font-size: 14px;
                font-weight: 500;
                text-decoration: none;
                transition: var(--transition);
                display: inline-flex;
                align-items: center;
                justify-content: center;
                gap: 8px;
                box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            }

            .action-btn:hover {
                background-color: var(--primary-hover);
                transform: translateY(-2px);
                box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            }

            .edit-btn {
                background-color: var(--warning-color);
                color: white;
                padding: 6px 12px;
                border: none;
                border-radius: var(--border-radius);
                cursor: pointer;
                font-size: 12px;
                transition: var(--transition);
            }

            .edit-btn:hover {
                background-color: #ca8a04;
            }

            .delete-btn {
                background-color: var(--danger-color);
                color: white;
                padding: 6px 12px;
                border: none;
                border-radius: var(--border-radius);
                cursor: pointer;
                font-size: 12px;
                transition: var(--transition);
            }

            .delete-btn:hover {
                background-color: #dc2626;
            }

            /* Modal Styles */
            .modal {
                display: none;
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background-color: rgba(0, 0, 0, 0.5);
                z-index: 1050;
            }

            .modal.show {
                display: block;
            }

            .modal-dialog {
                position: relative;
                width: auto;
                margin: 1.75rem auto;
                max-width: 500px;
            }

            .modal-content {
                position: relative;
                display: flex;
                flex-direction: column;
                width: 100%;
                background-color: #fff;
                border-radius: 0.3rem;
                box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
            }

            .modal-header {
                display: flex;
                align-items: flex-start;
                justify-content: space-between;
                padding: 1rem;
                border-bottom: 1px solid #dee2e6;
                border-top-left-radius: 0.3rem;
                border-top-right-radius: 0.3rem;
            }

            .modal-body {
                position: relative;
                flex: 1 1 auto;
                padding: 1rem;
            }

            .modal-footer {
                display: flex;
                flex-wrap: wrap;
                align-items: center;
                justify-content: flex-end;
                padding: 0.75rem;
                border-top: 1px solid #dee2e6;
                border-bottom-right-radius: 0.3rem;
                border-bottom-left-radius: 0.3rem;
            }

            .modal-backdrop {
                position: fixed;
                top: 0;
                left: 0;
                z-index: 1040;
                width: 100vw;
                height: 100vh;
                background-color: #000;
            }

            .modal-backdrop.fade {
                opacity: 0;
            }

            .modal-backdrop.show {
                opacity: 0.5;
            }

            .modal-content h2 {
                margin-top: 0;
                font-size: 1.5rem;
                color: var(--primary-color);
                text-align: center;
                margin-bottom: 20px;
            }

            .form-group {
                margin-bottom: 15px;
            }

            .form-group label {
                display: block;
                font-weight: 500;
                margin-bottom: 5px;
                color: var(--dark-gray);
            }

            .form-group input {
                width: 100%;
                padding: 8px;
                border: 1px solid #ccc;
                border-radius: var(--border-radius);
                font-size: 14px;
            }

            .form-group input:focus {
                outline: none;
                border-color: var(--primary-color);
            }

            .form-actions {
                display: flex;
                justify-content: flex-end;
                gap: 10px;
                margin-top: 20px;
            }

            .submit-btn, .cancel-btn {
                padding: 8px 16px;
                border: none;
                border-radius: var(--border-radius);
                font-size: 14px;
                cursor: pointer;
                transition: var(--transition);
            }

            .submit-btn {
                background-color: var(--primary-color);
                color: white;
            }

            .submit-btn:hover {
                background-color: var(--primary-hover);
                transform: translateY(-2px);
                box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            }

            .cancel-btn {
                background-color: #e5e7eb;
                color: var(--dark-gray);
            }

            .cancel-btn:hover {
                background-color: #d1d5db;
                transform: translateY(-2px);
                box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            }

            .required {
                color: red;
                margin-left: 3px;
            }

            .form-group input:invalid {
                border-color: #ff4444;
            }

            .form-group input:valid {
                border-color: #00C851;
            }
        </style>
    </head>
    <body>
        <div class="container mt-4">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2>Quản lý nhân viên</h2>
                <div>
                    <a href="/admin/classes" class="btn btn-info me-2">
                        <i class="fas fa-chalkboard"></i> Xem danh sách lớp
                    </a>
                    <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addEmployeeModal">
                        <i class="fas fa-plus"></i> Thêm nhân viên
                    </button>
                    <a href="<%= BASE_URL %>/auth/logout" class="btn btn-danger ms-2">
                        <i class="fas fa-sign-out-alt"></i> Đăng xuất
                    </a>
                </div>
            </div>

            <% if (error) { %>
                <div class="alert alert-danger" role="alert">
                    <%= error %>
                </div>
            <% } %>

            <% if (typeof success !== 'undefined' && success) { %>
                <div class="alert alert-success" role="alert">
                    <%= success %>
                </div>
            <% } %>

            <div class="employees-table">
                <div class="search-container">
                    <input type="text" id="search" placeholder="Tìm theo mã NV hoặc họ tên...">
                </div>
                <table class="table table-bordered">
                    <thead>
                        <tr>
                            <th>Mã NV</th>
                            <th>Họ tên</th>
                            <th>Email</th>
                            <th>Tên đăng nhập</th>
                            <th>Lương</th>
                            <th>Thao tác</th>
                        </tr>
                    </thead>
                    <tbody id="employees-tbody">
                        <!-- Employees will be rendered by JavaScript -->
                    </tbody>
                </table>
                <div class="pagination" id="pagination"></div>
            </div>

            <!-- Add Employee Modal -->
            <div id="addEmployeeModal" class="modal" tabindex="-1">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">Thêm Nhân viên Mới</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <form id="addEmployeeFormContent" action="<%= BASE_URL %>/admin/employees/add" method="POST" onsubmit="return handleAddEmployeeSubmit(event)">
                            <div class="modal-body">
                                <div class="form-group">
                                    <label for="manv">Mã nhân viên: <span class="required">*</span></label>
                                    <input type="text" id="manv" name="manv" required 
                                        pattern="[A-Za-z0-9]+" 
                                        title="Mã nhân viên chỉ được chứa chữ cái và số"
                                        placeholder="VD: NV01">
                                </div>
                                <div class="form-group">
                                    <label for="hoten">Họ tên: <span class="required">*</span></label>
                                    <input type="text" id="hoten" name="hoten" required
                                        placeholder="VD: Nguyễn Văn A">
                                </div>
                                <div class="form-group">
                                    <label for="email">Email: <span class="required">*</span></label>
                                    <input type="email" id="email" name="email" required
                                        pattern="^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$"
                                        title="Email phải có định dạng: example@domain.com"
                                        placeholder="VD: nva@example.com">
                                </div>
                                <div class="form-group">
                                    <label for="luongcb">Lương cơ bản: <span class="required">*</span></label>
                                    <input type="number" id="luongcb" name="luongcb" required min="0"
                                        placeholder="VD: 5000000">
                                </div>
                                <div class="form-group">
                                    <label for="tendn">Tên đăng nhập: <span class="required">*</span></label>
                                    <input type="text" id="tendn" name="tendn" required
                                        pattern="[A-Za-z0-9]+"
                                        title="Tên đăng nhập chỉ được chứa chữ cái và số"
                                        placeholder="VD: nva">
                                </div>
                                <div class="form-group">
                                    <label for="matkhau">Mật khẩu: <span class="required">*</span></label>
                                    <input type="password" id="matkhau" name="matkhau" required
                                        minlength="6"
                                        title="Mật khẩu phải có ít nhất 6 ký tự"
                                        placeholder="Nhập mật khẩu (ít nhất 6 ký tự)">
                                </div>
                            </div>
                            <div class="modal-footer">
                                <button type="submit" class="btn btn-primary">
                                    <i class="fas fa-plus"></i> Thêm
                                </button>
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                                    <i class="fas fa-times"></i> Hủy
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>

            <!-- Edit Employee Modal -->
            <div id="editEmployeeModal" class="modal" tabindex="-1">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">Cập nhật Thông tin Nhân viên</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <form id="editEmployeeFormContent" action="<%= BASE_URL %>/admin/employees/update" method="POST" onsubmit="return validateEditForm()">
                            <div class="modal-body">
                                <input type="hidden" id="edit_manv" name="manv">
                                <div class="form-group">
                                    <label for="edit_hoten">Họ tên: <span class="required">*</span></label>
                                    <input type="text" id="edit_hoten" name="hoten" required
                                        placeholder="VD: Nguyễn Văn A"
                                        minlength="2"
                                        title="Họ tên phải có ít nhất 2 ký tự">
                                </div>
                                <div class="form-group">
                                    <label for="edit_email">Email: <span class="required">*</span></label>
                                    <input type="email" id="edit_email" name="email" required
                                        pattern="^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$"
                                        title="Email phải có định dạng: example@domain.com"
                                        placeholder="VD: nva@example.com">
                                </div>
                                <div class="form-group">
                                    <label for="edit_luongcb">Lương cơ bản: <span class="required">*</span></label>
                                    <input type="number" id="edit_luongcb" name="luongcb" required 
                                        min="0"
                                        title="Lương phải là số dương"
                                        placeholder="VD: 5000000">
                                </div>
                                <div class="form-group">
                                    <label for="edit_tendn">Tên đăng nhập: <span class="required">*</span></label>
                                    <input type="text" id="edit_tendn" name="tendn" required
                                        pattern="[A-Za-z0-9]+"
                                        title="Tên đăng nhập chỉ được chứa chữ cái và số"
                                        placeholder="VD: nva">
                                </div>
                                <div class="form-group">
                                    <label for="edit_matkhau">Mật khẩu: <span class="required">*</span></label>
                                    <input type="password" id="edit_matkhau" name="matkhau" required
                                        minlength="6"
                                        title="Mật khẩu phải có ít nhất 6 ký tự"
                                        placeholder="Nhập mật khẩu (ít nhất 6 ký tự)">
                                </div>
                            </div>
                            <div class="modal-footer">
                                <button type="submit" class="btn btn-primary">
                                    <i class="fas fa-save"></i> Cập nhật
                                </button>
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                                    <i class="fas fa-times"></i> Hủy
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>

            <!-- Class Management Modal -->
            <div id="classManagementModal" class="modal fade" tabindex="-1" aria-labelledby="classManagementModalLabel" aria-hidden="true">
                <div class="modal-dialog modal-lg">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="classManagementModalLabel">Quản lý Lớp học của Nhân viên</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <h4 id="employeeName"></h4>
                            <h5>Danh sách lớp đang quản lý</h5>
                            <table class="table table-bordered">
                                <thead>
                                    <tr>
                                        <th>Mã lớp</th>
                                        <th>Tên lớp</th>
                                        <th>Khóa học</th>
                                    </tr>
                                </thead>
                                <tbody id="managedClassesTable">
                                    <!-- Managed classes will be rendered here -->
                                </tbody>
                            </table>
                            <h5>Phân công lớp học</h5>
                            <form id="assignClassesForm" action="<%= BASE_URL %>/class/classes/assign" method="POST">
                                <input type="hidden" id="assign_manv" name="manv">
                                <div class="form-group">
                                    <label>Chọn các lớp chưa được phân công:</label>
                                    <div id="unassignedClassesList">
                                        <!-- Unassigned classes will be rendered here -->
                                    </div>
                                </div>
                                <div class="modal-footer">
                                    <button type="submit" class="btn btn-primary">
                                        <i class="fas fa-check"></i> Phân công
                                    </button>
                                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                                        <i class="fas fa-times"></i> Hủy
                                    </button>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Bootstrap Bundle with Popper -->
        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
        <script>
            // Add BASE_URL to JavaScript context
            const BASE_URL = '<%= BASE_URL %>';
            
            // Debug logs
            const rawData = '<%- JSON.stringify(employees || []).replace(/\n/g, "\\n").replace(/\r/g, "\\r") %>';
            console.log('Raw employees data:', rawData);
            
            let employees = [];
            try {
                // Simplified JSON cleaning to avoid over-processing
                const cleanData = rawData.replace(/[\u0000-\u001F\u007F-\u009F]/g, '');
                console.log('Cleaned data:', cleanData);
                employees = JSON.parse(cleanData);
                console.log('Parsed employees:', employees);
            } catch (error) {
                console.error('Error parsing employees:', error);
                console.error('Problematic data:', rawData);
                employees = [];
                showMessage('Lỗi khi tải danh sách nhân viên', 'error');
            }

            const itemsPerPage = 7;
            let currentPage = 1;
            let filteredEmployees = [...employees];
            let totalPages = Math.ceil(filteredEmployees.length / itemsPerPage);

            // Search functionality
            document.getElementById('search').addEventListener('input', filterEmployees);

            function filterEmployees() {
                try {
                    const searchValue = document.getElementById('search').value.trim().toLowerCase();
                    console.log('Searching for:', searchValue);
                    filteredEmployees = employees.filter(employee => 
                        (employee.MANV || '').toLowerCase().includes(searchValue) ||
                        (employee.HOTEN || '').toLowerCase().includes(searchValue)
                    );
                    console.log('Filtered employees:', filteredEmployees);
                    totalPages = Math.ceil(filteredEmployees.length / itemsPerPage);
                    currentPage = 1;
                    renderEmployees(currentPage);
                    renderPagination();
                } catch (error) {
                    console.error('Error filtering employees:', error);
                    showMessage('Lỗi khi lọc danh sách nhân viên', 'error');
                }
            }

            function renderEmployees(page) {
                try {
                    console.log('Rendering page:', page);
                    const tbody = document.getElementById('employees-tbody');
                    if (!tbody) {
                        console.error('Could not find employees-tbody element');
                        showMessage('Lỗi giao diện: Không tìm thấy bảng nhân viên', 'error');
                        return;
                    }
                    tbody.innerHTML = '';
                    if (!filteredEmployees || filteredEmployees.length === 0) {
                        console.log('No employees to display');
                        tbody.innerHTML = '<tr><td colspan="6" style="text-align: center;">Không có dữ liệu</td></tr>';
                        return;
                    }

                    const start = (page - 1) * itemsPerPage;
                    const end = start + itemsPerPage;
                    const pageEmployees = filteredEmployees.slice(start, end);
                    console.log('Rendering employees:', pageEmployees);

                    pageEmployees.forEach(employee => {
                        const row = document.createElement('tr');
                        row.dataset.manv = employee.MANV;
                        row.style.cursor = 'pointer';
                        row.onclick = function(event) {
                            if (event.target.closest('.edit-btn') || event.target.closest('.delete-btn')) return;
                            showClassManagementModal(employee.MANV, employee.HOTEN);
                        };
                        row.innerHTML = `
                            <td>${employee.MANV || ''}</td>
                            <td>${employee.HOTEN || ''}</td>
                            <td>${employee.EMAIL || ''}</td>
                            <td>${employee.TENDN || ''}</td>
                            <td>${employee.LUONG || 'N/A'}</td>
                            <td>
                                <button class="edit-btn" onclick="event.stopPropagation(); showEditEmployee(this)">
                                    <i class="fas fa-edit"></i> Sửa
                                </button>
                                <button class="delete-btn" onclick="event.stopPropagation(); confirmDeleteEmployee('${employee.MANV}')">
                                    <i class="fas fa-trash"></i> Xóa
                                </button>
                            </td>
                        `;
                        tbody.appendChild(row);
                    });
                } catch (error) {
                    console.error('Error rendering employees:', error);
                    showMessage('Lỗi khi hiển thị danh sách nhân viên', 'error');
                }
            }

            function renderPagination() {
                try {
                    const pagination = document.getElementById('pagination');
                    pagination.innerHTML = '';
                    if (totalPages <= 1) return;

                    const prevButton = document.createElement('button');
                    prevButton.textContent = 'Trước';
                    prevButton.disabled = currentPage === 1;
                    prevButton.addEventListener('click', () => {
                        if (currentPage > 1) {
                            currentPage--;
                            renderEmployees(currentPage);
                            renderPagination();
                        }
                    });
                    pagination.appendChild(prevButton);

                    for (let i = 1; i <= totalPages; i++) {
                        const pageButton = document.createElement('button');
                        pageButton.textContent = i;
                        if (i === currentPage) pageButton.classList.add('active');
                        pageButton.addEventListener('click', () => {
                            currentPage = i;
                            renderEmployees(currentPage);
                            renderPagination();
                        });
                        pagination.appendChild(pageButton);
                    }

                    const nextButton = document.createElement('button');
                    nextButton.textContent = 'Sau';
                    nextButton.disabled = currentPage === totalPages;
                    nextButton.addEventListener('click', () => {
                        if (currentPage < totalPages) {
                            currentPage++;
                            renderEmployees(currentPage);
                            renderPagination();
                        }
                    });
                    pagination.appendChild(nextButton);
                } catch (error) {
                    console.error('Error rendering pagination:', error);
                    showMessage('Lỗi khi hiển thị phân trang', 'error');
                }
            }

            async function showClassManagementModal(manv, hoten) {
                try {
                    console.log('Starting showClassManagementModal with:', { manv, hoten });
                    
                    document.getElementById('employeeName').textContent = `Nhân viên: ${hoten}`;
                    document.getElementById('assign_manv').value = manv;
                    const managedClassesTable = document.getElementById('managedClassesTable');
                    const unassignedClassesList = document.getElementById('unassignedClassesList');

                    // Fetch managed classes
                    console.log('Fetching managed classes for employee:', manv);
                    const response = await fetch(`<%= BASE_URL %>/class/employee/${manv}`);
                    console.log('Response status:', response.status);
                    console.log('Response headers:', response.headers);
                    
                    const responseText = await response.text();
                    console.log('Raw response:', responseText);
                    
                    let data;
                    try {
                        data = JSON.parse(responseText);
                        console.log('Parsed data:', data);
                    } catch (parseError) {
                        console.error('Error parsing JSON:', parseError);
                        throw new Error('Invalid JSON response from server');
                    }

                    managedClassesTable.innerHTML = '';
                    if (data.success && data.classes && data.classes.length > 0) {
                        console.log('Rendering classes:', data.classes);
                        data.classes.forEach(cls => {
                            const row = document.createElement('tr');
                            row.innerHTML = `
                                <td>${cls.MALOP || ''}</td>
                                <td>${cls.TENLOP || ''}</td>
                                <td>${cls.MANV || ''}</td>
                            `;
                            managedClassesTable.appendChild(row);
                        });
                    } else {
                        console.log('No classes found or invalid data structure');
                        managedClassesTable.innerHTML = '<tr><td colspan="3" style="text-align: center;">Không có lớp nào</td></tr>';
                    }

                    // Fetch unassigned classes
                    console.log('Fetching unassigned classes');
                    const unassignedResponse = await fetch(`<%= BASE_URL %>/class/unassigned`);
                    console.log('Unassigned response status:', unassignedResponse.status);
                    
                    const unassignedText = await unassignedResponse.text();
                    console.log('Raw unassigned response:', unassignedText);
                    
                    let unassignedData;
                    try {
                        unassignedData = JSON.parse(unassignedText);
                        console.log('Parsed unassigned data:', unassignedData);
                    } catch (parseError) {
                        console.error('Error parsing unassigned JSON:', parseError);
                        throw new Error('Invalid JSON response from server for unassigned classes');
                    }

                    unassignedClassesList.innerHTML = '';
                    if (unassignedData.success && unassignedData.classes && unassignedData.classes.length > 0) {
                        console.log('Rendering unassigned classes:', unassignedData.classes);
                        unassignedData.classes.forEach(cls => {
                            const div = document.createElement('div');
                            div.className = 'form-check';
                            div.innerHTML = `
                                <input type="checkbox" class="form-check-input" name="classes" value="${cls.MALOP}">
                                <label class="form-check-label">${cls.TENLOP} (${cls.MALOP})</label>
                            `;
                            unassignedClassesList.appendChild(div);
                        });
                    } else {
                        console.log('No unassigned classes found or invalid data structure');
                        unassignedClassesList.innerHTML = '<p>Không có lớp nào chưa được phân công.</p>';
                    }

                    // Show modal
                    console.log('Showing modal');
                    const modalElement = document.getElementById('classManagementModal');
                    modalElement.style.display = 'block';
                    modalElement.classList.add('show');
                    document.body.classList.add('modal-open');
                    
                    // Add backdrop
                    const backdrop = document.createElement('div');
                    backdrop.className = 'modal-backdrop fade show';
                    document.body.appendChild(backdrop);
                } catch (error) {
                    console.error('Detailed error in showClassManagementModal:', {
                        message: error.message,
                        stack: error.stack,
                        name: error.name
                    });
                    showMessage('Lỗi khi tải danh sách lớp: ' + error.message, 'error');
                }
            }

            // Handle class assignment form submission
            document.getElementById('assignClassesForm').addEventListener('submit', async function(e) {
                e.preventDefault();
                const form = this;
                const formData = new FormData(form);
                const classes = formData.getAll('classes');
                if (classes.length === 0) {
                    showMessage('Vui lòng chọn ít nhất một lớp để phân công', 'error');
                    return;
                }

                try {
                    const response = await fetch(form.action, {
                        method: 'POST',
                        body: formData
                    });
                    const data = await response.json();
                    if (data.success) {
                        showMessage('Phân công lớp thành công', 'success');
                        // Hide modal
                        const modalElement = document.getElementById('classManagementModal');
                        modalElement.style.display = 'none';
                        modalElement.classList.remove('show');
                        document.body.classList.remove('modal-open');
                        // Remove backdrop
                        const backdrop = document.querySelector('.modal-backdrop');
                        if (backdrop) {
                            backdrop.remove();
                        }
                        // Refresh the page to show updated data
                        window.location.reload();
                    } else {
                        showMessage(data.error || 'Lỗi khi phân công lớp', 'error');
                    }
                } catch (error) {
                    console.error('Error assigning classes:', error);
                    showMessage('Lỗi khi phân công lớp', 'error');
                }
            });

            // Add event listener for modal close button
            document.querySelectorAll('[data-bs-dismiss="modal"]').forEach(button => {
                button.addEventListener('click', function() {
                    const modalElement = this.closest('.modal');
                    modalElement.style.display = 'none';
                    modalElement.classList.remove('show');
                    document.body.classList.remove('modal-open');
                    const backdrop = document.querySelector('.modal-backdrop');
                    if (backdrop) {
                        backdrop.remove();
                    }
                });
            });

            // Form handling
            function showAddEmployeeForm() {
                try {
                    const modal = new bootstrap.Modal(document.getElementById('addEmployeeModal'));
                    modal.show();
                } catch (error) {
                    console.error('Error showing add employee modal:', error);
                    showMessage('Lỗi khi hiển thị form thêm nhân viên', 'error');
                }
            }

            function showEditEmployee(button) {
                try {
                    const row = button.closest('tr');
                    const manv = row.dataset.manv;
                    const employee = employees.find(e => e.MANV === manv);

                    if (!employee) {
                        showMessage('Không tìm thấy thông tin nhân viên', 'error');
                        return;
                    }

                    document.getElementById('edit_manv').value = employee.MANV;
                    document.getElementById('edit_hoten').value = employee.HOTEN || '';
                    document.getElementById('edit_email').value = employee.EMAIL || '';
                    document.getElementById('edit_luongcb').value = employee.LUONGCB || '';
                    document.getElementById('edit_tendn').value = employee.TENDN || '';
                    document.getElementById('edit_matkhau').value = '';

                    const modal = new bootstrap.Modal(document.getElementById('editEmployeeModal'));
                    modal.show();
                } catch (error) {
                    console.error('Error showing edit employee form:', error);
                    showMessage('Lỗi khi hiển thị form chỉnh sửa', 'error');
                }
            }

            function confirmDeleteEmployee(manv) {
                if (confirm('Bạn có chắc chắn muốn xóa nhân viên này?')) {
                    fetch(`<%= BASE_URL %>/admin/employees/${manv}`, {
                        method: 'DELETE'
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            employees = employees.filter(e => e.MANV !== manv);
                            filterEmployees();
                            showMessage('Xóa nhân viên thành công', 'success');
                        } else {
                            showMessage(data.error || 'Lỗi khi xóa nhân viên', 'error');
                        }
                    })
                    .catch(error => {
                        console.error('Error deleting employee:', error);
                        showMessage('Lỗi khi xóa nhân viên', 'error');
                    });
                }
            }

            function showMessage(message, type = 'success') {
                const msgDiv = document.createElement('div');
                msgDiv.className = `alert alert-${type}`;
                msgDiv.textContent = message;
                document.querySelector('.container').insertBefore(msgDiv, document.querySelector('.employees-table'));
                setTimeout(() => msgDiv.remove(), 3000);
            }

            // Email validation function
            function validateEmail(input) {
                const email = input.value;
                const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
                input.setCustomValidity(emailRegex.test(email) ? '' : 'Email không hợp lệ. Vui lòng nhập email theo định dạng: example@domain.com');
            }

            // Form validation
            document.getElementById('addEmployeeFormContent').addEventListener('submit', function(e) {
                const email = document.getElementById('email').value;
                const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
                if (!emailRegex.test(email)) {
                    e.preventDefault();
                    alert('Email không hợp lệ. Vui lòng nhập email theo định dạng: example@domain.com');
                }
            });

            document.getElementById('editEmployeeFormContent').addEventListener('submit', function(e) {
                const email = document.getElementById('edit_email').value;
                const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
                if (!emailRegex.test(email)) {
                    e.preventDefault();
                    alert('Email không hợp lệ. Vui lòng nhập email theo định dạng: example@domain.com');
                }
            });

            function validateEditForm() {
                const form = document.getElementById('editEmployeeFormContent');
                const hoten = form.hoten.value.trim();
                const email = form.email.value.trim();
                const luongcb = form.luongcb.value.trim();
                const tendn = form.tendn.value.trim();
                const matkhau = form.matkhau.value.trim();

                if (!hoten || !email || !luongcb || !tendn || !matkhau) {
                    alert('Vui lòng điền đầy đủ thông tin');
                    return false;
                }

                const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
                if (!emailRegex.test(email)) {
                    alert('Email không hợp lệ. Vui lòng nhập email theo định dạng: example@domain.com');
                    return false;
                }

                if (isNaN(luongcb) || parseFloat(luongcb) <= 0) {
                    alert('Lương phải là số dương');
                    return false;
                }

                const tendnRegex = /^[A-Za-z0-9]+$/;
                if (!tendnRegex.test(tendn)) {
                    alert('Tên đăng nhập chỉ được chứa chữ cái và số');
                    return false;
                }

                if (matkhau.length < 6) {
                    alert('Mật khẩu phải có ít nhất 6 ký tự');
                    return false;
                }

                return true;
            }

            async function handleAddEmployeeSubmit(event) {
                event.preventDefault();

                const form = document.getElementById('addEmployeeFormContent');
                const formData = new FormData(form);

                // Log form data for debugging
                console.log('Form data before submission:');
                for (let [key, value] of formData.entries()) {
                    console.log(`${key}: ${key === 'matkhau' ? '******' : value}`);
                }

                try {
                    // Input validation
                    const manv = formData.get('manv');
                    const hoten = formData.get('hoten');
                    const email = formData.get('email');
                    const luongcb = formData.get('luongcb');
                    const tendn = formData.get('tendn');
                    const matkhau = formData.get('matkhau');

                    if (!manv || !hoten || !email || !luongcb || !tendn || !matkhau) {
                        throw new Error('Vui lòng nhập đầy đủ thông tin');
                    }

                    const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
                    if (!emailRegex.test(email)) {
                        throw new Error('Email không hợp lệ');
                    }

                    if (isNaN(luongcb) || parseFloat(luongcb) <= 0) {
                        throw new Error('Lương phải là số dương');
                    }

                    // Submit form directly
                    const response = await fetch(form.action, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/x-www-form-urlencoded',
                        },
                        body: new URLSearchParams(formData)
                    });

                    if (!response.ok) {
                        const errorData = await response.text();
                        throw new Error(errorData || 'Lỗi khi thêm nhân viên');
                    }

                    // Close modal and reload page
                    const modal = bootstrap.Modal.getInstance(document.getElementById('addEmployeeModal'));
                    modal.hide();
                    window.location.reload();

                } catch (error) {
                    console.error('Error in handleAddEmployeeSubmit:', error);
                    showMessage(error.message, 'error');
                }
            }

            console.log('Initializing with employees:', employees);
            renderEmployees(currentPage);
            renderPagination();
        </script>
    </body>
    </html> 