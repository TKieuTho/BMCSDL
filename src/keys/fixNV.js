const sql = require('mssql');

const { generateRSAKeyPairFromMK, rsaEncrypt } = require('../utils/crypto');
const fs = require('fs').promises;
const path = require('path');
const KEYS_DIR = path.join(__dirname, 'keys');
// ƒê·∫£m b·∫£o th∆∞ m·ª•c t·ªìn t·∫°i
fs.mkdir(KEYS_DIR, { recursive: true }).catch(console.error);
const dbConfig = {
    user: 'sa',
    password: 'Thikieutho08',
    server: 'localhost',
    port: 1433,
    database: 'QLSVNhom',
    options: {
        encrypt: false,
        trustServerCertificate: true,
    },
    pool: {
        max: 10,
        min: 0,
        idleTimeoutMillis: 30000,
    },
};

async function getConnection() {
    const pool = await sql.connect(dbConfig);
    return pool;
}


// H√†m t·∫°o l∆∞∆°ng ng·∫´u nhi√™n
function generateRandomSalary() {
    return 5000000 + Math.floor(Math.random() * 1000000); // t·ª´ 5 tri·ªáu ƒë·∫øn 6 tri·ªáu
}

// H√†m x·ª≠ l√Ω t·ª´ng nh√¢n vi√™n
async function fixEmployeeKeysAndSalary(manv, matkhau, newSalary) {
    try {
        // T·∫°o kh√≥a t·ª´ m·∫≠t kh·∫©u
        const { publicKey, privateKey } = await generateRSAKeyPairFromMK(matkhau);
        const pubkeyName = `${manv}_public.pem`;
        const privateKeyName = `${manv}_private.pem`;

        // Ghi file kh√≥a
        await fs.writeFile(path.join(KEYS_DIR, pubkeyName), publicKey);
        await fs.writeFile(path.join(KEYS_DIR, privateKeyName), privateKey);
        console.log(`üîê ƒê√£ t·∫°o kh√≥a m·ªõi cho ${manv}`);

        // M√£ h√≥a l∆∞∆°ng
        const encryptedSalary = rsaEncrypt(newSalary.toString(), publicKey);

        // C·∫≠p nh·∫≠t CSDL
        const pool = await getConnection();
        const request = pool.request();
        request.input('MANV', sql.VarChar, manv);
        request.input('LUONG', sql.VarBinary, Buffer.from(encryptedSalary, 'base64'));
        request.input('PUBKEY', sql.NVarChar, pubkeyName);
        await request.query(`
            UPDATE NHANVIEN
            SET LUONG = @LUONG, PUBKEY = @PUBKEY
            WHERE MANV = @MANV
        `);

        console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t LUONG v√† PUB cho ${manv}`);
    } catch (error) {
        console.error(`‚ùå L·ªói s·ª≠a ${manv}:`, error.message);
    }
}

// H√†m x·ª≠ l√Ω to√†n b·ªô nh√¢n vi√™n
async function fixAllEmployees() {
    let pool;
    try {
        pool = await getConnection();
        const result = await pool.request().execute('SP_SEL_ALL_NHANVIEN');

        if (!result.recordset || result.recordset.length === 0) {
            console.log('‚ö†Ô∏è Kh√¥ng c√≥ nh√¢n vi√™n n√†o trong CSDL');
            return;
        }

        console.log(`üìã T√¨m th·∫•y ${result.recordset.length} nh√¢n vi√™n`);

        for (const employee of result.recordset) {
            const manv = employee.MANV;
            if (!manv) {
                console.warn('‚ö†Ô∏è Nh√¢n vi√™n thi·∫øu MANV, b·ªè qua:', employee);
                continue;
            }

            const matkhau = '123456'; // Ho·∫∑c employee.TENDN n·∫øu c√≥
            const newSalary = generateRandomSalary();
            await fixEmployeeKeysAndSalary(manv, matkhau, newSalary);
        }

        console.log('üéâ Ho√†n t·∫•t c·∫≠p nh·∫≠t to√†n b·ªô nh√¢n vi√™n');
    } catch (error) {
        console.error('‚ùå L·ªói khi x·ª≠ l√Ω nh√¢n vi√™n:', error.message);
    } finally {
        if (pool) {
            await pool.close().catch(err => console.error('L·ªói ƒë√≥ng k·∫øt n·ªëi:', err.message));
        }
    }
}

// G·ªçi h√†m ch√≠nh
fixAllEmployees().catch(error => {
    console.error('‚ùå L·ªói th·ª±c thi:', error.message);
    process.exit(1);
});
